{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/Users/valentinovizner/Documents/private_projects/rust/advent_of_code/rust_2021/solutions/src/lib.rs","byte_start":143,"byte_end":150,"line_start":8,"line_end":8,"column_start":11,"column_end":18,"is_primary":true,"text":[{"text":"      let (p1,p2) = { $($body)+ };","highlight_start":11,"highlight_end":18}],"label":"expected `()`, found tuple","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/day08.rs","byte_start":1028,"byte_end":1559,"line_start":39,"line_end":53,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"solutions::main! {","highlight_start":1,"highlight_end":19},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"  let input = read_file(\"/Users/valentinovizner/Documents/private_projects/rust/advent_of_code/rust_2021/input/2021/day8.txt\").lines()","highlight_start":1,"highlight_end":135},{"text":"    .map(|l| {","highlight_start":1,"highlight_end":15},{"text":"      let (a,b) = l.split_once(\" | \").unwrap();","highlight_start":1,"highlight_end":48},{"text":"      let p1 = a.split_whitespace().collect();","highlight_start":1,"highlight_end":47},{"text":"      let p2 = b.split_whitespace().collect();","highlight_start":1,"highlight_end":47},{"text":"      (p1,p2)","highlight_start":1,"highlight_end":14},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"    .collect::<Vec<_>>();","highlight_start":1,"highlight_end":26},{"text":"    println!(\"{:?}\", &input);","highlight_start":1,"highlight_end":30},{"text":"//   let p1 = input.clone().iter().map(part1).sum::<usize>();","highlight_start":1,"highlight_end":62},{"text":"//   let p2 = input.clone().iter().map(part2).sum::<usize>();","highlight_start":1,"highlight_end":62},{"text":"//   (p1,p2)","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"solutions::main!","def_site_span":{"file_name":"/Users/valentinovizner/Documents/private_projects/rust/advent_of_code/rust_2021/solutions/src/lib.rs","byte_start":32,"byte_end":335,"line_start":4,"line_end":15,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! main {","highlight_start":1,"highlight_end":20},{"text":"  ($($body:tt)+) => {","highlight_start":1,"highlight_end":22},{"text":"    fn main() {","highlight_start":1,"highlight_end":16},{"text":"      let now = std::time::Instant::now();","highlight_start":1,"highlight_end":43},{"text":"      let (p1,p2) = { $($body)+ };","highlight_start":1,"highlight_end":35},{"text":"      let time = now.elapsed().as_millis();","highlight_start":1,"highlight_end":44},{"text":"      println!(\"Part one: {:?}\", p1);","highlight_start":1,"highlight_end":38},{"text":"      println!(\"Part two: {:?}\", p2);","highlight_start":1,"highlight_end":38},{"text":"      println!(\"Time: {}ms\", time);","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/valentinovizner/Documents/private_projects/rust/advent_of_code/rust_2021/solutions/src/lib.rs","byte_start":153,"byte_end":166,"line_start":8,"line_end":8,"column_start":21,"column_end":34,"is_primary":false,"text":[{"text":"      let (p1,p2) = { $($body)+ };","highlight_start":21,"highlight_end":34}],"label":"this expression has type `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/day08.rs","byte_start":1028,"byte_end":1559,"line_start":39,"line_end":53,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"solutions::main! {","highlight_start":1,"highlight_end":19},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"  let input = read_file(\"/Users/valentinovizner/Documents/private_projects/rust/advent_of_code/rust_2021/input/2021/day8.txt\").lines()","highlight_start":1,"highlight_end":135},{"text":"    .map(|l| {","highlight_start":1,"highlight_end":15},{"text":"      let (a,b) = l.split_once(\" | \").unwrap();","highlight_start":1,"highlight_end":48},{"text":"      let p1 = a.split_whitespace().collect();","highlight_start":1,"highlight_end":47},{"text":"      let p2 = b.split_whitespace().collect();","highlight_start":1,"highlight_end":47},{"text":"      (p1,p2)","highlight_start":1,"highlight_end":14},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"    .collect::<Vec<_>>();","highlight_start":1,"highlight_end":26},{"text":"    println!(\"{:?}\", &input);","highlight_start":1,"highlight_end":30},{"text":"//   let p1 = input.clone().iter().map(part1).sum::<usize>();","highlight_start":1,"highlight_end":62},{"text":"//   let p2 = input.clone().iter().map(part2).sum::<usize>();","highlight_start":1,"highlight_end":62},{"text":"//   (p1,p2)","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"solutions::main!","def_site_span":{"file_name":"/Users/valentinovizner/Documents/private_projects/rust/advent_of_code/rust_2021/solutions/src/lib.rs","byte_start":32,"byte_end":335,"line_start":4,"line_end":15,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! main {","highlight_start":1,"highlight_end":20},{"text":"  ($($body:tt)+) => {","highlight_start":1,"highlight_end":22},{"text":"    fn main() {","highlight_start":1,"highlight_end":16},{"text":"      let now = std::time::Instant::now();","highlight_start":1,"highlight_end":43},{"text":"      let (p1,p2) = { $($body)+ };","highlight_start":1,"highlight_end":35},{"text":"      let time = now.elapsed().as_millis();","highlight_start":1,"highlight_end":44},{"text":"      println!(\"Part one: {:?}\", p1);","highlight_start":1,"highlight_end":38},{"text":"      println!(\"Part two: {:?}\", p2);","highlight_start":1,"highlight_end":38},{"text":"      println!(\"Time: {}ms\", time);","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n       found tuple `(_, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/day08.rs:39:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msolutions::main! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  let input = read_file(\"/Users/valentinovizner/Documents/private_projects/rust/advent_of_code/rust_2021/input/2021/day8.txt\").lines()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    .map(|l| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//   (p1,p2)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found tuple\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis expression has type `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                  found tuple `\u001b[0m\u001b[0m\u001b[1m(_, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `solutions::main` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
